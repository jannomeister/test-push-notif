"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var component_event_service_1 = require("../services/component-event.service");
var moment = require("moment");
var momentTimezone = require("moment-timezone");
var CallSchedule = /** @class */ (function () {
    function CallSchedule() {
    }
    CallSchedule.prototype.deserialize = function (input) {
        Object.assign(this, input);
        return this;
    };
    CallSchedule.prototype.formatDate = function () {
        var date = new Date(this.callDate.replace(/-/g, "/"));
        return moment(date).format('ll');
    };
    CallSchedule.prototype.convertTo24hrs = function (time) {
        var hours = Number(time.match(/^(\d+)/)[1]);
        var minutes = Number(time.match(/:(\d+)/)[1]);
        var AMPM = time.match(/\s(.*)$/)[1];
        if ((AMPM == "PM" || AMPM == "pm") && hours < 12)
            hours = hours + 12;
        if ((AMPM == "AM" || AMPM == "am") && hours == 12)
            hours = hours - 12;
        var sHours = hours.toString();
        var sMinutes = minutes.toString();
        if (hours < 10)
            sHours = "0" + sHours;
        if (minutes < 10)
            sMinutes = "0" + sMinutes;
        return sHours + ":" + sMinutes + ":00";
    };
    CallSchedule.prototype.formatTime = function () {
        var timeArr = this.callTime.trim().split(':');
        var hours = parseInt(timeArr[0]);
        var minutes = parseInt(timeArr[1]);
        var ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12;
        minutes = minutes < 10 ? parseInt('0' + minutes) : minutes;
        var minutesStr = (minutes === 0) ? '00' : ((minutes < 10) ? '0' + minutes : minutes.toString());
        var strTime = hours + ':' + minutesStr + ' ' + ampm;
        return strTime;
    };
    CallSchedule.prototype.getSchedule = function () {
        if (!this.callDate || !this.callTime) {
            return 'No schedule yet.';
        }
        else {
            var d = new Date(this.callDate.trim()), month = d.getMonth() + 1, day = d.getDate(), year = d.getFullYear();
            var date = moment(year + "/" + month + "/" + day + " " + this.callTime, 'YYYY-MM-DD HH:mm:ss').format('lll');
            return date;
        }
    };
    CallSchedule.prototype.getStudentLocalTime = function (userTimezone, country) {
        var timezones = component_event_service_1.ComponentEventService.supportedTimezones;
        if (this.callDate && this.callTime) {
            country = country.toLowerCase();
            var studentTimezone = (country === 'guatemala') ? timezones[0] : ((country === 'zimbabwe') ? timezones[1] : timezones[0]);
            var date = this.callDate + " " + this.callTime;
            var userTime = momentTimezone.tz(date, 'YYYY-MM-DD HH:mm:ss', userTimezone);
            var studentTime = momentTimezone.tz(userTime, studentTimezone);
            var time_1 = studentTime.format('h:mm A');
            return "In " + country + " " + time_1;
        }
        else {
            return '';
        }
    };
    CallSchedule.prototype.getTime = function () {
        var dateAndTime = (this.callDate && this.callTime) ? new Date(this.callDate + " " + this.callTime) : new Date();
        var date = dateAndTime;
        return {
            hour: date.getHours(),
            minute: date.getMinutes()
        };
    };
    CallSchedule.prototype.getButtonText = function () {
        return (!this.skypeId && !this.callDate && !this.callTime) ? 'Ok' : ((this.skypeId && this.callDate && this.callTime) ? 'Ok' : 'Add');
    };
    CallSchedule.prototype.hasSchedule = function () {
        return (!this.skypeId && !this.callDate && !this.callTime) ? true : ((this.skypeId && this.callDate && this.callTime) ? true : false);
    };
    CallSchedule.prototype.hasDateAndTime = function () {
        return (this.callDate && this.callTime) ? true : false;
    };
    CallSchedule.prototype.isRequiredFieldsNotEmpty = function () {
        if (!this.skypeId ||
            !this.callDate ||
            !this.callTime) {
            return false;
        }
        else {
            return true;
        }
    };
    CallSchedule.prototype.isNotWeekend = function () {
        var date = new Date(this.callDate);
        var week = moment(date).weekday();
        return (week >= 1 && week <= 5) ? true : false;
    };
    CallSchedule.prototype.isCallConfirmed = function () {
        return (this.status === 'confirmed') ? true : false;
    };
    CallSchedule.prototype.isCallUnconfirmed = function () {
        return (this.status === 'unconfirmed') ? true : false;
    };
    return CallSchedule;
}());
exports.CallSchedule = CallSchedule;
//# sourceMappingURL=data:application/json;base64,